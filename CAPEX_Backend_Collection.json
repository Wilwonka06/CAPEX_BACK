{
  "info": {
    "name": "CAPEX Backend API Collection",
    "description": "Colección completa para probar la API de CAPEX Backend. Incluye CRUD para recursos principales: Auth, Users, Products, Services, Appointments, Suppliers, Purchases, Orders, Sales. Usa variables de entorno para baseUrl y token.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000/api",
      "type": "string"
    },
    {
      "key": "token",
      "value": "",
      "type": "string"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{token}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "exec": [
          "// Establecer auth si no está set",
          "if (!pm.environment.get('token')) {",
          "  console.log('Token no disponible, ejecuta login primero');",
          "}"
        ],
        "type": "text/javascript"
      }
    }
  ],
  "item": [
    {
      "name": "Authentication",
      "description": "Endpoints de autenticación para obtener token JWT.",
      "item": [
        {
          "name": "Login",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"correo\": \"admin@example.com\",\n  \"contrasena\": \"Admin123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            },
            "description": "Iniciar sesión y obtener token de autenticación."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has token', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('token');",
                  "    pm.environment.set('token', jsonData.token);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Users",
      "description": "CRUD operations for Users (usuarios). Base path: /api/users",
      "item": [
        {
          "name": "GET All Users",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users",
              "host": ["{{baseUrl}}"],
              "path": ["users"]
            },
            "description": "Obtener todos los usuarios con paginación y filtros opcionales."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test('Response is array', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET User by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/1",
              "host": ["{{baseUrl}}"],
              "path": ["users", "1"]
            },
            "description": "Obtener un usuario por ID."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test('Response has user data', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.have.property('id_usuario');",
                  "    pm.expect(jsonData.data).to.have.property('nombre');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "POST Create User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nombre\": \"Juan Pérez\",\n  \"tipo_documento\": \"Cedula de ciudadania\",\n  \"documento\": \"12345678\",\n  \"telefono\": \"+573001234567\",\n  \"correo\": \"juan.perez@example.com\",\n  \"contrasena\": \"Password123!\",\n  \"roleId\": 1,\n  \"estado\": \"Activo\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users",
              "host": ["{{baseUrl}}"],
              "path": ["users"]
            },
            "description": "Crear un nuevo usuario."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "pm.test('User created', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data.nombre).to.eql('Juan Pérez');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "PUT Update User",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nombre\": \"Juan Updated\",\n  \"correo\": \"juan.updated@example.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/1",
              "host": ["{{baseUrl}}"],
              "path": ["users", "1"]
            },
            "description": "Actualizar completamente un usuario por ID."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test('User updated', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.nombre).to.eql('Juan Updated');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "PATCH Change User Status",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"estado\": \"Inactivo\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/1/cambiar-estado",
              "host": ["{{baseUrl}}"],
              "path": ["users", "1", "cambiar-estado"]
            },
            "description": "Actualización parcial: Cambiar estado del usuario."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test('Status changed', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.estado).to.eql('Inactivo');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "DELETE User",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/1",
              "host": ["{{baseUrl}}"],
              "path": ["users", "1"]
            },
            "description": "Eliminar un usuario por ID."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test('User deleted', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('eliminado');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Products",
      "description": "CRUD operations for Products (productos). Base path: /api/productos",
      "item": [
        {
          "name": "GET All Products",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/productos",
              "host": ["{{baseUrl}}"],
              "path": ["productos"]
            },
            "description": "Obtener todos los productos."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test('Products array', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET Product by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/productos/1",
              "host": ["{{baseUrl}}"],
              "path": ["productos", "1"]
            },
            "description": "Obtener un producto por ID."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test('Product data', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('id_producto');",
                  "    pm.expect(jsonData.data).to.have.property('nombre');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "POST Create Product",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nombre\": \"Laptop Dell\",\n  \"id_categoria_producto\": 1,\n  \"costo\": 500000.00,\n  \"iva\": 19.00,\n  \"precio_venta\": 600000.00,\n  \"stock\": 10,\n  \"url_foto\": \"https://example.com/laptop.jpg\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/productos",
              "host": ["{{baseUrl}}"],
              "path": ["productos"]
            },
            "description": "Crear un nuevo producto."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "pm.test('Product created', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.nombre).to.eql('Laptop Dell');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "PUT Update Product",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nombre\": \"Laptop Dell Updated\",\n  \"precio_venta\": 650000.00\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/productos/1",
              "host": ["{{baseUrl}}"],
              "path": ["productos", "1"]
            },
            "description": "Actualizar un producto por ID."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "DELETE Product",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/productos/1",
              "host": ["{{baseUrl}}"],
              "path": ["productos", "1"]
            },
            "description": "Eliminar un producto por ID."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Services",
      "description": "CRUD operations for Services (servicios). Base path: /api/services",
      "item": [
        {
          "name": "GET All Services",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/services",
              "host": ["{{baseUrl}}"],
              "path": ["services"]
            },
            "description": "Obtener todos los servicios."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET Service by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/services/1",
              "host": ["{{baseUrl}}"],
              "path": ["services", "1"]
            },
            "description": "Obtener un servicio por ID."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test('Service data', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('id_servicio');",
                  "    pm.expect(jsonData.data).to.have.property('nombre');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "POST Create Service",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nombre\": \"Corte de cabello\",\n  \"id_categoria_servicio\": 1,\n  \"descripcion\": \"Corte básico\",\n  \"duracion\": 30,\n  \"precio\": 25000.00,\n  \"estado\": \"Activo\",\n  \"foto\": \"https://example.com/corte.jpg\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/services",
              "host": ["{{baseUrl}}"],
              "path": ["services"]
            },
            "description": "Crear un nuevo servicio."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "PUT Update Service",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"precio\": 30000.00\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/services/1",
              "host": ["{{baseUrl}}"],
              "path": ["services", "1"]
            },
            "description": "Actualizar un servicio por ID."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "DELETE Service",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/services/1",
              "host": ["{{baseUrl}}"],
              "path": ["services", "1"]
            },
            "description": "Eliminar un servicio por ID."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Appointments",
      "description": "CRUD operations for Appointments (citas). Base path: /api/citas",
      "item": [
        {
          "name": "GET All Appointments",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/citas",
              "host": ["{{baseUrl}}"],
              "path": ["citas"]
            },
            "description": "Obtener todas las citas."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET Appointment by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/citas/1",
              "host": ["{{baseUrl}}"],
              "path": ["citas", "1"]
            },
            "description": "Obtener una cita por ID."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test('Appointment data', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('id_cita');",
                  "    pm.expect(jsonData.data).to.have.property('fecha_servicio');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "POST Create Appointment",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"id_cliente\": 1,\n  \"fecha_servicio\": \"2024-10-01\",\n  \"hora_entrada\": \"09:00:00\",\n  \"hora_salida\": \"10:00:00\",\n  \"estado\": \"Agendada\",\n  \"valor_total\": 25000.00,\n  \"motivo\": \"Corte de cabello\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/citas",
              "host": ["{{baseUrl}}"],
              "path": ["citas"]
            },
            "description": "Crear una nueva cita."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "PUT Update Appointment",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"fecha_servicio\": \"2024-10-02\",\n  \"valor_total\": 30000.00\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/citas/1",
              "host": ["{{baseUrl}}"],
              "path": ["citas", "1"]
            },
            "description": "Actualizar una cita por ID."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "PATCH Cancel Appointment",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"motivo_cancelacion\": \"Cambio de horario\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/citas/1/cancelar",
              "host": ["{{baseUrl}}"],
              "path": ["citas", "1", "cancelar"]
            },
            "description": "Cancelar una cita (actualización parcial)."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test('Appointment cancelled', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.estado).to.eql('Cancelada por el usuario');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "DELETE Appointment",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/citas/1",
              "host": ["{{baseUrl}}"],
              "path": ["citas", "1"]
            },
            "description": "Eliminar una cita por ID (si aplica, o usar PATCH para cancelar)."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Suppliers",
      "description": "CRUD operations for Suppliers (proveedores). Base path: /api/proveedores",
      "item": [
        {
          "name": "GET All Suppliers",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/proveedores",
              "host": ["{{baseUrl}}"],
              "path": ["proveedores"]
            },
            "description": "Obtener todos los proveedores."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET Supplier by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/proveedores/1",
              "host": ["{{baseUrl}}"],
              "path": ["proveedores", "1"]
            },
            "description": "Obtener un proveedor por ID."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test('Supplier data', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('id_proveedor');",
                  "    pm.expect(jsonData.data).to.have.property('nombre');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "POST Create Supplier",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nit\": \"N123456\",\n  \"tipo_proveedor\": \"N\",\n  \"nombre\": \"Proveedor Tech\",\n  \"contacto\": \"Juan Doe\",\n  \"direccion\": \"Calle 123, Bogotá\",\n  \"correo\": \"proveedor@tech.com\",\n  \"telefono\": \"+573001234567\",\n  \"estado\": \"Activo\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/proveedores",
              "host": ["{{baseUrl}}"],
              "path": ["proveedores"]
            },
            "description": "Crear un nuevo proveedor."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "PUT Update Supplier",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nombre\": \"Proveedor Tech Updated\",\n  \"correo\": \"updated@tech.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/proveedores/1",
              "host": ["{{baseUrl}}"],
              "path": ["proveedores", "1"]
            },
            "description": "Actualizar un proveedor por ID."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "DELETE Supplier",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/proveedores/1",
              "host": ["{{baseUrl}}"],
              "path": ["proveedores", "1"]
            },
            "description": "Eliminar un proveedor por ID."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Purchases",
      "description": "CRUD operations for Purchases (compras). Base path: /api/compras",
      "item": [
        {
          "name": "GET All Purchases",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/compras",
              "host": ["{{baseUrl}}"],
              "path": ["compras"]
            },
            "description": "Obtener todas las compras con paginación."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test('Purchases array', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "GET Purchase by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/compras/1",
              "host": ["{{baseUrl}}"],
              "path": ["compras", "1"]
            },
            "description": "Obtener una compra por ID."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test('Purchase data', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('id_compra');",
                  "    pm.expect(jsonData.data).to.have.property('total');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "POST Create Purchase",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"id_proveedor\": 1,\n  \"fecha_registro\": \"2024-10-01\",\n  \"fecha_compra\": \"2024-10-01\",\n  \"subtotal\": 500000.00,\n  \"iva\": 95000.00,\n  \"total\": 595000.00,\n  \"estado\": \"Completada\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/compras",
              "host": ["{{baseUrl}}"],
              "path": ["compras"]
            },
            "description": "Crear una nueva compra."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "pm.test('Purchase created', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.total).to.eql(595000.00);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "PATCH Cancel Purchase",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"motivo\": \"Error en el pedido\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/compras/1/cancelar",
              "host": ["{{baseUrl}}"],
              "path": ["compras", "1", "cancelar"]
            },
            "description": "Cancelar una compra (actualización parcial)."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test('Purchase cancelled', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.estado).to.eql('Cancelada');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "DELETE Purchase",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/compras/1",
              "host": ["{{baseUrl}}"],
              "path": ["compras", "1"]
            },
            "description": "Eliminar una compra por ID."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Orders",
      "description": "CRUD operations for Orders (pedidos). Base path: /api/pedidos",
      "item": [
        {
          "name": "GET All Orders",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/pedidos",
              "host": ["{{baseUrl}}"],
              "path": ["pedidos"]
            },
            "description": "Obtener todos los pedidos."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test('Orders array', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "POST Create Order",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"id_cliente\": 1,\n  \"fecha_pedido\": \"2024-10-01\",\n  \"total\": 120000.00,\n  \"estado\": \"Pendiente\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/pedidos",
              "host": ["{{baseUrl}}"],
              "path": ["pedidos"]
            },
            "description": "Crear un nuevo pedido."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "PUT Update Order",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"estado\": \"Confirmado\",\n  \"total\": 130000.00\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/pedidos/1",
              "host": ["{{baseUrl}}"],
              "path": ["pedidos", "1"]
            },
            "description": "Actualizar un pedido por ID."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "DELETE Order",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/pedidos/1",
              "host": ["{{baseUrl}}"],
              "path": ["pedidos", "1"]
            },
            "description": "Eliminar un pedido por ID."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Sales",
      "description": "CRUD operations for Sales (ventas). Base path: /api/ventas",
      "item": [
        {
          "name": "GET All Sales",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/ventas",
              "host": ["{{baseUrl}}"],
              "path": ["ventas"]
            },
            "description": "Obtener todas las ventas."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test('Sales array', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "POST Create Sale",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"id_cliente\": 1,\n  \"fecha_venta\": \"2024-10-01\",\n  \"total\": 80000.00,\n  \"estado\": \"Completada\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/ventas",
              "host": ["{{baseUrl}}"],
              "path": ["ventas"]
            },
            "description": "Crear una nueva venta."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "PUT Update Sale",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"total\": 90000.00\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/ventas/1",
              "host": ["{{baseUrl}}"],
              "path": ["ventas", "1"]
            },
            "description": "Actualizar una venta por ID."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "DELETE Sale",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/ventas/1",
              "host": ["{{baseUrl}}"],
              "path": ["ventas", "1"]
            },
            "description": "Eliminar una venta por ID."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    }
  ]
}